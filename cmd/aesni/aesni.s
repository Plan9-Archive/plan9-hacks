#define AESENCX1X0	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0xDC; BYTE $0xC1
#define AESENCLASTX1X0	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0xDD; BYTE $0xC1

// using round keys in rk, perform Nr rounds of encrypting pt into ct
// void _aesni_encrypt(const ulong rk[/* 4*(Nr + 1) */], int Nr, const uchar pt[16], uchar ct[16])
TEXT	_aesni_encrypt+0(SB), $0
	MOVQ RARG, AX		// rk
	MOVQ Nr+8(FP), CX
	MOVQ pt+16(FP), BX
	MOVQ ct+24(FP), DX
	MOVUPS 0(AX), X1
	MOVUPS 0(BX), X0
	ADDQ $16, AX
	PXOR X1, X0
	SUBQ $12, CX
	JE Lenc196
	JB Lenc128
Lenc256:
	MOVUPS 0(AX), X1
	AESENCX1X0
	MOVUPS 16(AX), X1
	AESENCX1X0
	ADDQ $32, AX
Lenc196:
	MOVUPS 0(AX), X1
	AESENCX1X0
	MOVUPS 16(AX), X1
	AESENCX1X0
	ADDQ $32, AX
Lenc128:
	MOVUPS 0(AX), X1
	AESENCX1X0
	MOVUPS 16(AX), X1
	AESENCX1X0
	MOVUPS 32(AX), X1
	AESENCX1X0
	MOVUPS 48(AX), X1
	AESENCX1X0
	MOVUPS 64(AX), X1
	AESENCX1X0
	MOVUPS 80(AX), X1
	AESENCX1X0
	MOVUPS 96(AX), X1
	AESENCX1X0
	MOVUPS 112(AX), X1
	AESENCX1X0
	MOVUPS 128(AX), X1
	AESENCX1X0
	MOVUPS 144(AX), X1
	AESENCLASTX1X0
	MOVUPS X0, 0(DX)
	RET
